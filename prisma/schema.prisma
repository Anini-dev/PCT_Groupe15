// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id             Int           @id @default(autoincrement())
  nom            String
  prenom         String
  email          String        @unique
  telephone      String?
  motDePasse     String
  role           String
  communeId      Int?
  commune        Commune?      @relation(fields: [communeId], references: [id])
  demandes       Demande[]
  paiements      Paiement[]
  notifications  Notification[]
  createdAt      DateTime      @default(now())
}

model Demande {
  id             Int             @id @default(autoincrement())
  utilisateurId  Int
  utilisateur    Utilisateur     @relation(fields: [utilisateurId], references: [id])
  typeActe       String?
  statut         String?
  fichiers       Fichier[]
  paiement       Paiement?       @relation(fields: [paiementId], references: [id])
  paiementId     Int?
  acte           Acte?
  createdAt      DateTime        @default(now())
}

model Fichier {
  id             Int           @id @default(autoincrement())
  url            String
  nom            String
  demandeId      Int
  demande        Demande       @relation(fields: [demandeId], references: [id])
  createdAt      DateTime      @default(now())
}

model Acte {
  id             Int           @id @default(autoincrement())
  demandeId      Int           @unique
  demande        Demande       @relation(fields: [demandeId], references: [id])
  fichierUrl     String?
  type           String
  createdAt      DateTime      @default(now())
}

model Notification {
  id             Int           @id @default(autoincrement())
  message        String?
  lu             Boolean       @default(false)
  utilisateurId  Int
  utilisateur    Utilisateur   @relation(fields: [utilisateurId], references: [id])
  createdAt      DateTime      @default(now())
}

model Paiement {
  id             Int           @id @default(autoincrement())
  montant        Float
  statut         String
  moyen          String
  utilisateurId  Int
  utilisateur    Utilisateur   @relation(fields: [utilisateurId], references: [id])
  demandes       Demande[]
  createdAt      DateTime      @default(now())
}

model Commune {
  id             Int           @id @default(autoincrement())
  nom            String        @unique
  utilisateurs   Utilisateur[]
}